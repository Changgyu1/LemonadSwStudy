    // 스터디 신청
    public void addUsersByPostNo(Long post_no, Long user_no) {
    	// Alarm 찾기
    	Alarm alarm = new Alarm();
    	// post_no : 게시글 작성자 의 user_no 찾아서 보내주기
    	StudyPost userNumber = studyPostMapper.selectUserNoByPostNo(post_no);
    	alarm.setUser_no(userNumber.getUser_no()); // 게시글 작성자에게 보내줌
    	alarm.setPost_no(post_no); // 어떤 게시물에 대한건지 
    	SwithUser userNickName = usersMapper.findByUserNo(user_no); // user_no를 가진신청자 이름 불F러오기
    	alarm.setAlarm_message(userNickName.getNickname() + "님이 참가 신청 하였습니다."); // 누가 신청했는지 메세지 설정
    	alarmMapper.insertAlarm(alarm);
    	studyPostMapper.addUsersByPostNo(post_no, user_no);
    }


        // 스터디 신청 상태 업데이트 (승인/거절)
    public void updateApplicantsStatus(Long user_no, Long post_no, boolean accept) {
    	Alarm alarm = new Alarm();
    	
    	alarm.setPost_no(post_no);
    	alarm.setUser_no(user_no);
    	StudyPost studyPostInfo = studyPostMapper.selectUserNoByPostNo(post_no);
    	
    	System.out.println("서비스 accept"+ accept);
        try {   
                if (accept) { // accept가 true라면 승인 
                    studyPostMapper.acceptApplicant(post_no, user_no);
                    alarm.setAlarm_message(studyPostInfo.getStudy_title() + "의 참가 신청 되었습니다.");
                    
                } else {
                	studyPostMapper.deleteApplicant(post_no, user_no);
                	alarm.setAlarm_message(studyPostInfo.getStudy_title() + "의 참가 거절 되었습니다.");
                }
            
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage());
        }
    }


    StudyMapper 
    	StudyPost selectUserNoByPostNo(Long post_no);


        xml
        	<select id="selectUserNoByPostNo" parameterType="lm.swith.main.model.StudyPost">
	SELECT USER_NO, RECRUIT_TYPE, STUDY_TITLE FROM STUDY_POST WHERE post_no = #{post_no}
	</select>